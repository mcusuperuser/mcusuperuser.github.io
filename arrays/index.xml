<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Arrays on Embedded C for Arm Cortex-M Microcontrollers</title>
    <link>https://mcusuperuser.github.io/arrays/</link>
    <description>Recent content in Arrays on Embedded C for Arm Cortex-M Microcontrollers</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 23 Dec 2020 16:07:32 +0100</lastBuildDate><atom:link href="https://mcusuperuser.github.io/arrays/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>https://mcusuperuser.github.io/arrays/introduction/</link>
      <pubDate>Wed, 23 Dec 2020 22:38:04 +0100</pubDate>
      
      <guid>https://mcusuperuser.github.io/arrays/introduction/</guid>
      <description>Arrays may contain any number of elements which must be of the same type. The array index is zero based and the size of the array (number of elements) must be specified at the array declaration.
Syntax
type arrayIdentifier[size]; The size refers to the number of elements and must be a constant integer.
Code example
int n[100]; // an array that holds 100 integer values  char c[26]; // an array that holds 26 characters Arrays may be initialized when declared using a list:</description>
    </item>
    
    <item>
      <title>Multidimensional arrays</title>
      <link>https://mcusuperuser.github.io/arrays/multidim/</link>
      <pubDate>Wed, 23 Dec 2020 22:38:14 +0100</pubDate>
      
      <guid>https://mcusuperuser.github.io/arrays/multidim/</guid>
      <description>Arrays may have any number of dimensions that are added in the declaration:
Syntax
type arrayIdentifier[size0]...[sizen]; Code example
int n[3][3]; // 3 x 3 array for 9 integers  float c[10][10][10]; // 10 x 10 x 10 array for 1000 floats Multidimensional arrays are initialized with lists within a list:
Syntax
type arrayIdentifier[size0]...[sizen] = {{item, ..., item}, ... {item, ..., item}}; Code example
char c[3][3] = {{&amp;#39;o&amp;#39;,&amp;#39;x&amp;#39;,&amp;#39;o&amp;#39;}, {&amp;#39;x&amp;#39;,&amp;#39;x&amp;#39;,&amp;#39;x&amp;#39;}, {&amp;#39;o&amp;#39;,&amp;#39;x&amp;#39;,&amp;#39;o&amp;#39;}}; int n[2][3][4] = {{{0, 1, 2, 3},{4, 5, 6, 7},{8, 9, 10, 11}}, {{12, 13, 14, 15},{16, 17, 18, 19},{20,21, 22, 23}}}; Visualizing 2-dimensional arrays Visualizing 3-dimensional arrays </description>
    </item>
    
    <item>
      <title>Strings</title>
      <link>https://mcusuperuser.github.io/arrays/strings/</link>
      <pubDate>Wed, 23 Dec 2020 22:38:19 +0100</pubDate>
      
      <guid>https://mcusuperuser.github.io/arrays/strings/</guid>
      <description>Strings are arrays of char whose last element is a null character \0 with an ASCII value of 0. As C has no native string data type, strings must always be treated as character arrays.
Strings:
 are enclosed in double quotes: &amp;ldquo;string&amp;rdquo; are terminated by a null character \0 must be manipulated as arrays of characters (treated element by element) may be initialized with a string literal  Creating a string character array Syntax</description>
    </item>
    
  </channel>
</rss>
