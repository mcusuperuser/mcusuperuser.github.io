<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Constants and literals on Embedded C for Arm Cortex-M Microcontrollers</title>
    <link>https://mcusuperuser.github.io/constlit/</link>
    <description>Recent content in Constants and literals on Embedded C for Arm Cortex-M Microcontrollers</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 23 Dec 2020 16:06:27 +0100</lastBuildDate><atom:link href="https://mcusuperuser.github.io/constlit/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Constants</title>
      <link>https://mcusuperuser.github.io/constlit/constants/</link>
      <pubDate>Wed, 23 Dec 2020 21:13:17 +0100</pubDate>
      
      <guid>https://mcusuperuser.github.io/constlit/constants/</guid>
      <description>Constants, as the name implies, never change their value which makes development changes easy and eliminates the use of &amp;ldquo;magic numbers&amp;rdquo;.
Syntax
There are two ways to declare a constant:
#define identifierName value  const type identifierName value;  The identifierName is the constant, while the value is the literal. The first way is very efficient for an embedded system, as it does not consume any memory in the microcontroller. Using the #define, you declare a text substitution label, which means that each instance of identifierName will be replaced with value by the preprocessor unless identifierName is inside a string.</description>
    </item>
    
    <item>
      <title>Literals</title>
      <link>https://mcusuperuser.github.io/constlit/literals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mcusuperuser.github.io/constlit/literals/</guid>
      <description>A literal is the actual value (such as a number or character for example), that is assigned to a variable or constant. You can also use literals directly as a function parameter or as an operand in an expression. While both terms are often used interchangeably, they are not the same. A literal is a constant, but a constant is not a literal.
Types of literals The Arm assembler user&amp;rsquo;s guide states that &amp;ldquo;source code can contain numeric, string, Boolean, and single character literals&amp;rdquo;.</description>
    </item>
    
  </channel>
</rss>
