<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Decision making on Embedded C for Arm Cortex-M Microcontrollers</title>
    <link>https://mcusuperuser.github.io/decisions/</link>
    <description>Recent content in Decision making on Embedded C for Arm Cortex-M Microcontrollers</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 23 Dec 2020 16:07:02 +0100</lastBuildDate><atom:link href="https://mcusuperuser.github.io/decisions/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Boolean expressions</title>
      <link>https://mcusuperuser.github.io/decisions/boolean/</link>
      <pubDate>Wed, 23 Dec 2020 21:58:56 +0100</pubDate>
      
      <guid>https://mcusuperuser.github.io/decisions/boolean/</guid>
      <description>C (unlike C++) does not have a boolean data type. As shown in the table in chapter Data types, you can use _Bool for that. But the usual convention is that any boolean expression returns integer values:
 0 if an expression evaluates as FALSE non-zero if it evaluates as TRUE (usually 1, but this is not guaranteed)  Code example
int main (void) { int a = 3, b, c; c = (a &amp;gt; 2); // c = 1 (TRUE)  b = (a &amp;lt; 1); // b = 0 (FALSE) } Express it differently Expressions can be written in different ways which all lead to the same result (are evaluated similarly).</description>
    </item>
    
    <item>
      <title>if statement</title>
      <link>https://mcusuperuser.github.io/decisions/if/</link>
      <pubDate>Wed, 23 Dec 2020 21:59:01 +0100</pubDate>
      
      <guid>https://mcusuperuser.github.io/decisions/if/</guid>
      <description>Syntax
if (expression) statement The expression is evaluated in a boolean fashion. If it is true, the statement is executed.
The statement can also be a compound/block statement.
Code example
#define BUTTONPRESSED 1  int main (void) { if (BUTTONPRESSED) { printf(&amp;#34;Button is pressed\n&amp;#34;); } } if (a) vs. if (a == 1) Not only laziness commands the usage of if (a). This C code will also lead to reduced assembly code size, as it only has to test for not being equal to 0:</description>
    </item>
    
    <item>
      <title>switch statement</title>
      <link>https://mcusuperuser.github.io/decisions/switch/</link>
      <pubDate>Wed, 23 Dec 2020 21:59:06 +0100</pubDate>
      
      <guid>https://mcusuperuser.github.io/decisions/switch/</guid>
      <description>Syntax
switch (expression) { case const-expr1: statements1 : case const-exprn: statementsn default: statementsn+1 } The expression is evaluated and tested for a match with the const-expr in each case clause. The statement(s) in the matching case clause is/are executed.
Each statement falls through to the next statement. This is the default behavior of the switch statement.
Adding a break statement to each statement block will eliminate fall through, allowing only one case clause&amp;rsquo;s statement block to be executed.</description>
    </item>
    
  </channel>
</rss>
