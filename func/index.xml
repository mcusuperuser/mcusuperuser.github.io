<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Functions on Embedded C for Arm Cortex-M Microcontrollers</title>
    <link>https://mcusuperuser.github.io/func/</link>
    <description>Recent content in Functions on Embedded C for Arm Cortex-M Microcontrollers</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 23 Dec 2020 16:07:17 +0100</lastBuildDate><atom:link href="https://mcusuperuser.github.io/func/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>https://mcusuperuser.github.io/func/functions/</link>
      <pubDate>Wed, 23 Dec 2020 22:19:42 +0100</pubDate>
      
      <guid>https://mcusuperuser.github.io/func/functions/</guid>
      <description>Functions provide a way to modularize code and make it easier to maintain. Also, functions promote code reuse.
All C programs have one (at least the main() function is required) or more functions.
Functions can accept parameters from the code that calls them.
Functions usually return a single value.
Functions help to organize a program into logical, manageable segments.
Syntax
type identifier (type1 arg1, type2 arg2, ..., typen argn) { declarations // body  statements // body  return expression; // body } Where:</description>
    </item>
    
    <item>
      <title>Return data type</title>
      <link>https://mcusuperuser.github.io/func/return/</link>
      <pubDate>Wed, 23 Dec 2020 22:17:13 +0100</pubDate>
      
      <guid>https://mcusuperuser.github.io/func/return/</guid>
      <description>A function&amp;rsquo;s type must match the type of data in the return expression. A function may have multiple return statements (of the same type), but only one will be executed. The function type is void if the return statement has no expression or is not present at all. This is also known as a procedure function, since nothing is returned. Functions can return any type except arrays and functions. We can get around this limitation by returning a pointer to an array or a pointer to a function.</description>
    </item>
    
    <item>
      <title>Parameters</title>
      <link>https://mcusuperuser.github.io/func/parameters/</link>
      <pubDate>Wed, 23 Dec 2020 22:17:22 +0100</pubDate>
      
      <guid>https://mcusuperuser.github.io/func/parameters/</guid>
      <description>A function&amp;rsquo;s parameters are declared just like ordinary variables, but in a comma separated list inside the parentheses. The parameter names are only valid inside the function (local to the function). The list may mix different data types. Parameters of the same type must be declared separately (as separation using commas will not work here). If no parameters are required, use the keyword void in place of the parameter list when defining the function.</description>
    </item>
    
    <item>
      <title>How to call a function</title>
      <link>https://mcusuperuser.github.io/func/callfunc/</link>
      <pubDate>Wed, 23 Dec 2020 22:17:28 +0100</pubDate>
      
      <guid>https://mcusuperuser.github.io/func/callfunc/</guid>
      <description>Code example
foo (); // no parameters, no return value x = foo (); // no parameters, but with a return value foo (n, m); // with parameters, but no return value x = foo (n, m); // with parameters and with a return value </description>
    </item>
    
    <item>
      <title>Function prototypes</title>
      <link>https://mcusuperuser.github.io/func/prototypes/</link>
      <pubDate>Wed, 23 Dec 2020 22:17:36 +0100</pubDate>
      
      <guid>https://mcusuperuser.github.io/func/prototypes/</guid>
      <description>Just like a variable, a function must be declared before it may be used. This declaration must occur before main() or any other function that uses it. The declaration may have two forms:
 The entire function definition. Just a function prototype â€“ the function definition itself may then be placed anywhere in the program.  Code example 1
In this example, the function is declared and defined before it is used in main().</description>
    </item>
    
    <item>
      <title>Passing parameters by value</title>
      <link>https://mcusuperuser.github.io/func/passingparams/</link>
      <pubDate>Wed, 23 Dec 2020 22:17:44 +0100</pubDate>
      
      <guid>https://mcusuperuser.github.io/func/passingparams/</guid>
      <description>Parameters are passed to a function by value. These values are copied into the local parameter variables. This means, that the original variable that is passed to a function cannot be modified by the function, since only a copy of its value was passed.
Code example
int n = 5, m = 10, res; int minimum (int a, int b); int main (void) { res = minimum (n, m); // the value of n is copied into a  // the value of m is copied into b  printf(&amp;#34;The minimum is %d\n&amp;#34;, res); } int minimum (int a, int b) { return ((a &amp;lt;= b) ?</description>
    </item>
    
    <item>
      <title>Functions and scope</title>
      <link>https://mcusuperuser.github.io/func/scope/</link>
      <pubDate>Wed, 23 Dec 2020 22:17:51 +0100</pubDate>
      
      <guid>https://mcusuperuser.github.io/func/scope/</guid>
      <description>Scope of parameters A function&amp;rsquo;s parameters are local to the function and have no meaning outside the function itself. Parameter names may have the same identifier as a variable declared outside the function, but the parameter names will take precedence inside the function.
Code example
// The following n&amp;#39;s are not the same: int n; int absolute (int n); Scope of variables inside a function Variables that are declared inside a function are local to the function itself.</description>
    </item>
    
  </channel>
</rss>
