<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Macros on Embedded C for Arm Cortex-M Microcontrollers</title>
    <link>https://mcusuperuser.github.io/macros/</link>
    <description>Recent content in Macros on Embedded C for Arm Cortex-M Microcontrollers</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://mcusuperuser.github.io/macros/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Simple macros</title>
      <link>https://mcusuperuser.github.io/macros/simple/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mcusuperuser.github.io/macros/simple/</guid>
      <description>Macros:
 Are evaluated by the preprocessor Cannot be executed by themselves Are used to control the generation of code before the compilation process Provide valuable shortcuts  Syntax
#define label text Every instance of label in the current file will be replaced by text.
text can be anything you can type into your editor.
Arithmetic expressions are evaluated at compile time.
Code example (system_ARMCM3.c)
/*---------------------------------------------------------------------------- Define clocks *----------------------------------------------------------------------------*/ #define XTAL (50000000UL) /* Oscillator frequency */#define SYSTEM_CLOCK (XTAL / 2U)  /*---------------------------------------------------------------------------- System Core Clock Variable *----------------------------------------------------------------------------*/ uint32_t SystemCoreClock = SYSTEM_CLOCK; /* System Core Clock Frequency */ </description>
    </item>
    
    <item>
      <title>Argument macros</title>
      <link>https://mcusuperuser.github.io/macros/argument/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mcusuperuser.github.io/macros/argument/</guid>
      <description>Argument macros create function-like macros:
Syntax
#define label(arg1, ..., argn) code The code must fit on a single line. For multi-line macros use &amp;lsquo;\&amp;rsquo; to split lines Arguments are inserted into code as text substitutions Each instance of label() will be expanded into code
Code example (arm_math.h)
#define __SIMD32(addr) (*(__SIMD32_TYPE **) &amp;amp; (addr)) #define __SIMD32_CONST(addr) ( (__SIMD32_TYPE * ) (addr)) #define _SIMD32_OFFSET(addr) (*(__SIMD32_TYPE * ) (addr)) #define __SIMD64(addr) (*( int64_t **) &amp;amp; (addr)) </description>
    </item>
    
  </channel>
</rss>
