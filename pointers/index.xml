<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pointers on Embedded C for Arm Cortex-M Microcontrollers</title>
    <link>https://mcusuperuser.github.io/pointers/</link>
    <description>Recent content in Pointers on Embedded C for Arm Cortex-M Microcontrollers</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 23 Dec 2020 16:07:37 +0100</lastBuildDate><atom:link href="https://mcusuperuser.github.io/pointers/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pointer declaration</title>
      <link>https://mcusuperuser.github.io/pointers/declaration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mcusuperuser.github.io/pointers/declaration/</guid>
      <description>As any other variable, you need to declare a pointer. Furthermore, you have to initialize a pointer before you can use it.
You declare a pointer just like any other variable:
Syntax
type *name; type can be any C type (such as char, int, or float for example).
name is the name of the pointer variable.
The * makes the variable a pointer.
Pointers are usually described as &amp;ldquo;a pointer to type&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Pointers and arrays</title>
      <link>https://mcusuperuser.github.io/pointers/andarrays/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mcusuperuser.github.io/pointers/andarrays/</guid>
      <description>In general, array elements occupy consecutive locations in memory. Using this knowledge, we can use pointers to access array elements.
Initializing a pointer to an array Code example
int a[5] = {0, 1, 2, 3, 4}; // integer array int *p; // Create a pointer to an integer variable To initialize the pointer to the array, you can use three different (equal) methods:
Code example
p = a; // works only for arrays, as the array name (here: a) is the same as the address of its first element; Arm compiler will not complain p = &amp;amp;a; // works for arrays and variabls alike, but in case of an array, the Arm compiler will issue a warning p = &amp;amp;a[0]; // safe way to point to the first element; compiler will not complain To move to the next element of the array, simply increment the pointer:</description>
    </item>
    
    <item>
      <title>Pointers and functions</title>
      <link>https://mcusuperuser.github.io/pointers/andfunctions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mcusuperuser.github.io/pointers/andfunctions/</guid>
      <description>In general, functions operate on copies of the data that is passed to them. This is called pass by value. The value of the variable that is passed to a function is copied into the local variable of the function. The original variable is not changed.
Passing pointers to functions Using a pointer, a function can operate on the original value instead of a copy. This is called pass by reference.</description>
    </item>
    
    <item>
      <title>Pointers and strings</title>
      <link>https://mcusuperuser.github.io/pointers/andstrings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mcusuperuser.github.io/pointers/andstrings/</guid>
      <description>Until now, we have used arrays of char to work with strings. Using pointers, strings can be created and used in a more efficient way.
Syntax
char *name = &amp;#34;string_content&amp;#34;; Note
 Initializing a character string when it is declared is essentially the same for both a pointer and an array The NULL character \0 is automatically appended to strings in both cases  Code example
char *str = &amp;#34;Cortex&amp;#34;; At initialization, a pointer to a string points to the first character.</description>
    </item>
    
    <item>
      <title>Arrays of pointers</title>
      <link>https://mcusuperuser.github.io/pointers/arraysof/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mcusuperuser.github.io/pointers/arraysof/</guid>
      <description>An array of pointers is an array variable whose elements are all be pointers.
Code example
char *str[3]; // creates an array of three pointers to char  str[0] = &amp;#34;IN&amp;#34;; str[1] = &amp;#34;OUT&amp;#34;; str[2] = &amp;#34;TRISTATE&amp;#34;; The array str[] itself is like any other array. Each element, such as str[1], is a pointers to char.
Strings will not “pack” this nicely! There will be empty locations between strings as the compiler aligns the strings in memory.</description>
    </item>
    
  </channel>
</rss>
