<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Structures on Embedded C for Arm Cortex-M Microcontrollers</title>
    <link>https://mcusuperuser.github.io/structs/</link>
    <description>Recent content in Structures on Embedded C for Arm Cortex-M Microcontrollers</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://mcusuperuser.github.io/structs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Structure definition</title>
      <link>https://mcusuperuser.github.io/structs/definition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mcusuperuser.github.io/structs/definition/</guid>
      <description>Syntax
struct structName { type1 memberName1; // Members are declared just  ... // like odinary variables  typen memberNamen; } </description>
    </item>
    
    <item>
      <title>Variable declaration</title>
      <link>https://mcusuperuser.github.io/structs/declaration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mcusuperuser.github.io/structs/declaration/</guid>
      <description>There are two ways to declare a structure variable:
 At structure definition:  Syntax
struct structName { type1 memberName1; // Members are declared just  ... // like odinary variables  typen memberNamen; } variableName1, ..., variableNamen; Code example
// structure to handle color values struct rgb { int red; int green; int blue; } color; // declare color of type rgb If the structure has already been defined:  Syntax</description>
    </item>
    
    <item>
      <title>Using structure variables</title>
      <link>https://mcusuperuser.github.io/structs/using/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mcusuperuser.github.io/structs/using/</guid>
      <description>Syntax
structVariableName.memberName; Code example
// structure to handle color values struct rgb { int red; int green; int blue; } color; int main (void){ color.red = 0; // set red portion of color  color.green = 145; // set green portion of color  blue = 189; // set blue portion of color } </description>
    </item>
    
    <item>
      <title>Structure types</title>
      <link>https://mcusuperuser.github.io/structs/types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mcusuperuser.github.io/structs/types/</guid>
      <description>Structure types can be created using a typedef.
Syntax
typedef struct structTag { type1 memberName1; ... typen memberNamen; } typeName; Note
 The structTag is optional  Code example
// structure type to handle color values typedef struct { int red; int green; int blue; } rgb; Declare a structure type variable If the typeName has already been defined, you can declare a variable of that type without the struct keyword:</description>
    </item>
    
    <item>
      <title>Initialization of structure variables</title>
      <link>https://mcusuperuser.github.io/structs/initialization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mcusuperuser.github.io/structs/initialization/</guid>
      <description>If typeName or structName have already been defined:
Syntax
typeName variableName = {const1, ..., constn}; // or struct structName variableName = {const1, ...,constn}; Code example
// structure type to handle color values typedef struct { int red; int green; int blue; } rgb; ... rgb color = {0, 145, 189}; </description>
    </item>
    
    <item>
      <title>Nested structures</title>
      <link>https://mcusuperuser.github.io/structs/nested/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mcusuperuser.github.io/structs/nested/</guid>
      <description>Using the typedef structure declaration, you can nest one structure within another structure.
Code example
// declare struct type for a single point typedef struct { float x; float y; } point; // declare a struct type for a line with a start and end point typedef struct { point start; point end; } line; int main(void) { line l; l.start.x = 3.5; l.start.y = 8.4; l.end.x = 12.7; l.end.y = 18.</description>
    </item>
    
    <item>
      <title>Pointers to structures</title>
      <link>https://mcusuperuser.github.io/structs/pointersto/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mcusuperuser.github.io/structs/pointersto/</guid>
      <description>There are two ways to declare a pointer to a structure. If the typeName or the structName have already been defined:
Syntax
typeName *pointerName; // or struct structName *pointerName; Code example
// structure type to handle color values typedef struct { int red; int green; int blue; } rgb; ... rgb *pColor; Code example
// structure type to handle color values struct rgb { int red; int green; int blue; } .</description>
    </item>
    
    <item>
      <title>Creating arrays of structures</title>
      <link>https://mcusuperuser.github.io/structs/arraysof/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mcusuperuser.github.io/structs/arraysof/</guid>
      <description>There are two ways to create arrays of structures. If the typeName or the structName have already been defined:
Syntax
typeName arrayName[n]; // or struct structName arrayName[n]; Code example
// structure type to handle color values typedef struct { int red; int green; int blue; } rgb; ... rgb aColor[2]; </description>
    </item>
    
    <item>
      <title>Initializing arrays of structures at declaration</title>
      <link>https://mcusuperuser.github.io/structs/initarraysof/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mcusuperuser.github.io/structs/initarraysof/</guid>
      <description>If the typeName or the structName have already been defined:
Syntax
typeName arrayName[n] = {{list1}, ..., {listn}}; // or struct structName arrayName[n] = {{list1}, ..., {listn}}; Code example
// structure type to handle color values typedef struct { int red; int green; int blue; } rgb; ... rgb aColor[2] = {{0, 0, 0}, {255, 255, 255}}; </description>
    </item>
    
    <item>
      <title>Using arrays of structures</title>
      <link>https://mcusuperuser.github.io/structs/usingarraysof/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mcusuperuser.github.io/structs/usingarraysof/</guid>
      <description>If the arrayName has already been defined:
Syntax
arrayName[n].memberName Code example
// structure type to handle color values typedef struct { int red; int green; int blue; } rgb; ... rgb aColor[2] = {{0, 0, 0}, {255, 255, 255}}; int main (void) { aColor[0].red = 0; aColor[0].green = 145; aColor[0].blue = 189; ... } </description>
    </item>
    
    <item>
      <title>Passing structures to functions</title>
      <link>https://mcusuperuser.github.io/structs/passingtofuncs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mcusuperuser.github.io/structs/passingtofuncs/</guid>
      <description>Code example
// structure type to handle color values typedef struct { int red; int green; int blue; } rgb; void show_rgb (rgb n) { printf(&amp;#34;(%d, %d, %d)\n&amp;#34;, n.reg, n.green, n.blue); } int main (void) { rgb a = {0, 145, 198}; rgb b = {0, 255, 255}; show_rgb (a); show_rgb (b); } </description>
    </item>
    
  </channel>
</rss>
